name: Golang HTTP Server deployment

on:
  push:
    branches: [test]

env:
  # For the purpose of demo it will use dev project as well here (ideally it should use "test" env)
  PROJECT_ID: allsaints-cloud-dev
  IMAGE: golang-flux-test

jobs:
  build:
    environment: dev
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Extract release branch version tag
        run: export SOURCEBRANCH=$(git log -1 --pretty=%B | awk -F '\\\\n' '{print $1}' |  awk -F '/' '{print $3}' | awk '{print $1}'); echo $SOURCEBRANCH

      # # Setup gcloud CLI with deployment service account
      # - name: Setup gcloud CLI
      #   uses: google-github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01edae7
      #   with:
      #     service_account_key: ${{ secrets.GKE_SA_KEY }}
      #     project_id: allsaints-cloud-dev

      # # Configure Docker to use the gcloud command-line tool as a credential
      # # helper for authentication
      # - name: Configure docker instance
      #   run: |-
      #     gcloud --quiet auth configure-docker

      # # Build the Docker image
      # - name: Build
      #   run: |-
      #     docker build \
      #       --tag "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" \
      #       --build-arg GITHUB_SHA="$GITHUB_SHA" \
      #       --build-arg GITHUB_REF="$GITHUB_REF" \
      #       .

      # # Push the Docker image to Google Container Registry
      # - name: Publish
      #   run: |-
      #     docker push "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"

      # # Update image tag for develop branch
      # - name: Update image hash
      #   run: sed -i "s/golang-flux-test:.*/golang-flux-test:$GITHUB_SHA/g" ./deployment/dev.yaml

      # # Add github email & name
      # - name: Add Github email
      #   run: git config --global user.email "ssitko@pgs-soft.com"; git config --global user.name "ssitko"

      # # Add changes
      # - name: Add current repo / deployment manifest changes
      #   run: git add deployment/dev.yaml

      # # Commit changes
      # - name: Commit changed manifest files
      #   run: git commit -m "Auto updating dev.yml k8s manifest"

      # # Fetch develop branch
      # - name: Fetch from develop
      #   run: git fetch origin develop

      # # Push updated manifest
      # - name: Push code to develop
      #   run: git push origin HEAD:develop
